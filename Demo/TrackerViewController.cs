// This file has been autogenerated from a class added in the UI designer.

using System;
using System.Collections.Generic;
using SQLite;
using Foundation;
using UIKit;
using CoreGraphics;

namespace Demo
{
	public partial class TrackerViewController : UIViewController
	{
        List<Person> user = new List<Person>();
        
        List<BudgetInfo> Info = new List<BudgetInfo>();
        
        public static int db_int;
        public static Person currentUser;
        public TrackerViewController (IntPtr handle) : base (handle)
		{
		}
        
        public override void ViewDidLoad()
        {
            base.ViewDidLoad();

            var gradient = new CoreAnimation.CAGradientLayer();
            gradient.Frame = View.Bounds;
            UIColor color = UIColor.FromRGB(175, 229, 252);

            CoreGraphics.CGColor[] colour = { UIColor.Blue.CGColor, color.CGColor };
            gradient.Colors = colour;
            gradient.StartPoint = new CGPoint(0, 0);
            gradient.EndPoint = new CGPoint(1, 1);
            View.Layer.InsertSublayer(gradient, 0);

            //ShowSpent.BackgroundColor = gradient;

            connectToPeople();

            //View.BackgroundColor = UIColor.Blue;

            Title = user[db_int].m_Name;
            currentUser = user[db_int];
            TrackerAllowance.Text = $"Allowance: £{currentUser.m_Money.ToString("0.00")}";
            WeeklyAlowance.Text = $"Weekly budget: £{CalculateWeeklyAllowance().ToString("0.00")}";

            AddViewController.db_int = db_int;
            ConnectToDB();
            
            LoadMoney();

            configure();
            NavigationItem.RightBarButtonItem.Clicked += RightBarButtonItem_Clicked;
            NavigationItem.RightBarButtonItems[1].Clicked += RefreshClicked;
            NavigationItem.RightBarButtonItem.TintColor = UIColor.Black;
            NavigationItem.RightBarButtonItems[1].TintColor = UIColor.Black;
            //NavigationItem.RightBarButtonItem.

        }

        /// <summary>
        /// Calculates weekly allowance for the user
        /// </summary>
        private float CalculateWeeklyAllowance()
        {
            DateTime startDATE = Convert.ToDateTime(currentUser.m_StartDate);
            DateTime endDATE = Convert.ToDateTime(currentUser.m_EndDate);
            double days = (endDATE - startDATE).TotalDays;
            int weeks = (int)days / 7;
            float weeklyAllowance = currentUser.m_Money / weeks;
            return weeklyAllowance;

        }

        private void LoadMoney()
        {
            ShowSpent.Source = new ListSpent(Info);
            var cell = ShowSpent.DequeueReusableCell("SpentCell") as ShowSpent;
            
        }
        private void RefreshClicked(object sender, EventArgs e)
        {
            
            Info.RemoveRange(0, Info.Count);
            //_Budget.ReloadData();
            ConnectToDB();
            //WeeklyAlowance.Text = $"Weekly budget: £{CalculateWeeklyAllowance().ToString("0.00")}";
            TrackerAllowance.Text = $"Allowance: £{currentUser.m_Money.ToString("0.00")}";
            
            LoadMoney();
            ShowSpent.ReloadData();
        }

       

        private void connectToPeople()
        {
            using (SQLiteConnection conn = new SQLiteConnection(AppDelegate.FilePath))
            {
                user = conn.Table<Person>().ToList();
            }
        }

        static public void update(int selection)
        {
            db_int = selection;
        }
        // when plus button pressed takes you to page
        private void RightBarButtonItem_Clicked(object sender, EventArgs e)
        {
            AddViewController tracker = Storyboard.InstantiateViewController(identifier: "AddViewController") as AddViewController;
            //AddViewController.db_int = db_int;
            AddViewController.currentPerson(user[db_int]);
            NavigationController.PushViewController(tracker, true);
        }

        // adds plus button to navigation bar
        private void configure()
        {
             
            var refreshButton = new UIBarButtonItem(UIBarButtonSystemItem.Add, target: View,action: null);
            var addButton = new UIBarButtonItem(UIBarButtonSystemItem.Refresh, target: View, action: null);
         
            UIBarButtonItem[] button = { refreshButton, addButton };
            NavigationItem.SetRightBarButtonItems(button, true);
            //NavigationItem.RightBarButtonItem = new UIBarButtonItem(UIBarButtonSystemItem.FastForward, target: View, null);
            //NavigationItem.RightBarButtonItem = new UIBarButtonItem(UIBarButtonSystemItem.Add, target: View, action: null);
        }

        

        private void ConnectToDB()
        {
            try
            {
                using (SQLiteConnection conn1 = new SQLiteConnection(AppDelegate.FilePath))
                {
                    //conn1.CreateTable<BudgetInfo>();
                    List<BudgetInfo> tempInfo = new List<BudgetInfo>();
                    tempInfo = conn1.Table<BudgetInfo>().ToList();
                    foreach(BudgetInfo spent in tempInfo)
                    {
                        if(spent.userId == currentUser.Id)
                        {
                            Info.Add(spent);
                        }
                    }
                }
                using (SQLiteConnection conn1 = new SQLiteConnection(AppDelegate.FilePath))
                {
                    //conn1.CreateTable<BudgetInfo>();
                    List<Person> tempInfo = new List<Person>();
                    tempInfo = conn1.Table<Person>().ToList();
                    foreach (Person spent in tempInfo)
                    {
                        if (spent.Id == currentUser.Id)
                        {
                            currentUser = spent;
                        }
                    }
                }
            }
            catch
            {

            }
            
            //using (SQLiteConnection conn = new SQLiteConnection(AppDelegate.FilePath))
            //{
            //    Info = conn.Table<BudgetInfo>().ToList();
            //}
        }
    }
}
